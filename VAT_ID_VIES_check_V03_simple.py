### load modules

import pandas as pd
import numpy as np
from datetime import datetime as dt

# vat-module must be installed first via 'pip install vat' in anaconda prompt
# Installation may require prior installation of Microsoft C++ builder
# >>> mind eventual error messsages when trying to install; they contain a link to 
#     the required software
import vat


### import data


# Read IMPORT file with UNIQUE VAT-IDs to check
# (e.g. generated by extracting UNIQUE VAT-IDs from Instrast-reports)
# structure:
# Just two columns on sheet named 'VAT_IDS' in file called 'test_input.xlsx' 
# Column 1: VAT_ID_OWN (...not required for VIES interface, containing the own entity's VAT-ID
# Column 2: VAT_ID_COUNTERPART > the name with actual partner VAT-IDs that need to be checked for validity

xlsx_imp = pd.ExcelFile('test_input.xlsx')
df_VAT_IDS = pd.read_excel(xlsx_imp, 'VAT_IDS')

# check input
df_VAT_IDS.head(5)


##### MAIN PROGRAM

### Initiation

# initiate empty output data frame with retrieved structure
# retrieve structure is based on return object attributes from VAT-package
# The column names serve at the same time as keys for the dictionary structure
# that is used lateron to append new responses to the output data frame

l_keys = ['REQ_DATE', 'VAT_ID_request', 'country_ret', 'VAT_ID_ret', 'valid', 'name', 'address']
df_out = pd.DataFrame(columns = l_keys)


### MAIN FUNCTIONAL LOOP

# getting responses for ALL VAT-IDs from input file and write VIES-responses
# to df_out data frame

for index, r in df_VAT_IDS.iterrows():
    
    # core request: get response object for counterpart VAT-ID that needs to be confirmed
    o_resp = vat.vies.check_vat(r.VAT_ID_COUNTERPART) # loop index
    
    # core code to transform request response to row that is
    # appended to output data frame df_out

    l_values = o_resp.request_date.strftime("%y_%m_%d").split("ยง") # .split to transform str directly to list !
    l_values.append(r.VAT_ID_COUNTERPART) # loop index 
    l_values.append(o_resp.country)
    l_values.append(o_resp.vat_number)
    l_values.append(o_resp.valid)
    l_values.append(o_resp.name)
    l_values.append(o_resp.address)

    # zipping key and value lists to dictionary and append as new row to df_out
    d_resp = dict(zip(l_keys, l_values))
    # print(d_response)
    df_out = df_out.append(d_resp, ignore_index = True)

# Check output data frame and length
df_out.head(5)
len(df_out)


### EXPORT RESULT TO EXCEL FILE (named '_VIES_VAT_ID_verification.xlsx')

writer = pd.ExcelWriter('_VIES_VAT_ID_verification.xlsx', engine='xlsxwriter')
df_out.to_excel(writer, sheet_name='VIES_responses', engine='xlsxwriter')
writer.save()



